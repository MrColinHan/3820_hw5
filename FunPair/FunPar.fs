// Implementation file for parser generated by fsyacc
module FunPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "FunPar.fsy"

 (* File Fun/FunPar.fsy
    Parser for micro-ML, a small functional language; one-argument functions.
  *)

 open Absyn;

# 16 "FunPar.fs"
// This type is the type of tokens accepted by the parser
type token =
  | EOF
  | LPAR
  | RPAR
  | EQ
  | NE
  | LT
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | ELSE
  | END
  | FALSE
  | IF
  | IN
  | LET
  | NOT
  | THEN
  | TRUE
  | CSTBOOL of (bool)
  | NAME of (string)
  | CSTINT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId =
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_LT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_ELSE
    | TOKEN_END
    | TOKEN_FALSE
    | TOKEN_IF
    | TOKEN_IN
    | TOKEN_LET
    | TOKEN_NOT
    | TOKEN_THEN
    | TOKEN_TRUE
    | TOKEN_CSTBOOL
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId =
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Expr
    | NONTERM_AtExpr
    | NONTERM_AppExpr
    | NONTERM_Const

// This function maps tokens to integer indexes
let tagOfToken (t:token) =
  match t with
  | EOF  -> 0
  | LPAR  -> 1
  | RPAR  -> 2
  | EQ  -> 3
  | NE  -> 4
  | LT  -> 5
  | PLUS  -> 6
  | MINUS  -> 7
  | TIMES  -> 8
  | DIV  -> 9
  | ELSE  -> 10
  | END  -> 11
  | FALSE  -> 12
  | IF  -> 13
  | IN  -> 14
  | LET  -> 15
  | NOT  -> 16
  | THEN  -> 17
  | TRUE  -> 18
  | CSTBOOL _ -> 19
  | NAME _ -> 20
  | CSTINT _ -> 21

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) =
  match tokenIdx with
  | 0 -> TOKEN_EOF
  | 1 -> TOKEN_LPAR
  | 2 -> TOKEN_RPAR
  | 3 -> TOKEN_EQ
  | 4 -> TOKEN_NE
  | 5 -> TOKEN_LT
  | 6 -> TOKEN_PLUS
  | 7 -> TOKEN_MINUS
  | 8 -> TOKEN_TIMES
  | 9 -> TOKEN_DIV
  | 10 -> TOKEN_ELSE
  | 11 -> TOKEN_END
  | 12 -> TOKEN_FALSE
  | 13 -> TOKEN_IF
  | 14 -> TOKEN_IN
  | 15 -> TOKEN_LET
  | 16 -> TOKEN_NOT
  | 17 -> TOKEN_THEN
  | 18 -> TOKEN_TRUE
  | 19 -> TOKEN_CSTBOOL
  | 20 -> TOKEN_NAME
  | 21 -> TOKEN_CSTINT
  | 24 -> TOKEN_end_of_input
  | 22 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) =
  match prodIdx with
    | 0 -> NONTERM__startMain
    | 1 -> NONTERM_Main
    | 2 -> NONTERM_Expr
    | 3 -> NONTERM_Expr
    | 4 -> NONTERM_Expr
    | 5 -> NONTERM_Expr
    | 6 -> NONTERM_Expr
    | 7 -> NONTERM_Expr
    | 8 -> NONTERM_Expr
    | 9 -> NONTERM_Expr
    | 10 -> NONTERM_Expr
    | 11 -> NONTERM_Expr
    | 12 -> NONTERM_Expr
    | 13 -> NONTERM_AtExpr
    | 14 -> NONTERM_AtExpr
    | 15 -> NONTERM_AtExpr
    | 16 -> NONTERM_AtExpr
    | 17 -> NONTERM_AtExpr
    | 18 -> NONTERM_AppExpr
    | 19 -> NONTERM_AppExpr
    | 20 -> NONTERM_Const
    | 21 -> NONTERM_Const
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 24
let _fsyacc_tagOfErrorTerminal = 22

// This function gets the name of a token as a string
let token_to_string (t:token) =
  match t with
  | EOF  -> "EOF"
  | LPAR  -> "LPAR"
  | RPAR  -> "RPAR"
  | EQ  -> "EQ"
  | NE  -> "NE"
  | LT  -> "LT"
  | PLUS  -> "PLUS"
  | MINUS  -> "MINUS"
  | TIMES  -> "TIMES"
  | DIV  -> "DIV"
  | ELSE  -> "ELSE"
  | END  -> "END"
  | FALSE  -> "FALSE"
  | IF  -> "IF"
  | IN  -> "IN"
  | LET  -> "LET"
  | NOT  -> "NOT"
  | THEN  -> "THEN"
  | TRUE  -> "TRUE"
  | CSTBOOL _ -> "CSTBOOL"
  | NAME _ -> "NAME"
  | CSTINT _ -> "CSTINT"

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) =
  match t with
  | EOF  -> (null : System.Object)
  | LPAR  -> (null : System.Object)
  | RPAR  -> (null : System.Object)
  | EQ  -> (null : System.Object)
  | NE  -> (null : System.Object)
  | LT  -> (null : System.Object)
  | PLUS  -> (null : System.Object)
  | MINUS  -> (null : System.Object)
  | TIMES  -> (null : System.Object)
  | DIV  -> (null : System.Object)
  | ELSE  -> (null : System.Object)
  | END  -> (null : System.Object)
  | FALSE  -> (null : System.Object)
  | IF  -> (null : System.Object)
  | IN  -> (null : System.Object)
  | LET  -> (null : System.Object)
  | NOT  -> (null : System.Object)
  | THEN  -> (null : System.Object)
  | TRUE  -> (null : System.Object)
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 17us; 65535us; 0us; 2us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 26us; 14us; 27us; 15us; 28us; 16us; 29us; 17us; 30us; 18us; 31us; 19us; 32us; 20us; 37us; 21us; 38us; 22us; 41us; 23us; 42us; 24us; 44us; 25us; 19us; 65535us; 0us; 4us; 4us; 46us; 5us; 47us; 6us; 4us; 8us; 4us; 10us; 4us; 12us; 4us; 26us; 4us; 27us; 4us; 28us; 4us; 29us; 4us; 30us; 4us; 31us; 4us; 32us; 4us; 37us; 4us; 38us; 4us; 41us; 4us; 42us; 4us; 44us; 4us; 17us; 65535us; 0us; 5us; 6us; 5us; 8us; 5us; 10us; 5us; 12us; 5us; 26us; 5us; 27us; 5us; 28us; 5us; 29us; 5us; 30us; 5us; 31us; 5us; 32us; 5us; 37us; 5us; 38us; 5us; 41us; 5us; 42us; 5us; 44us; 5us; 19us; 65535us; 0us; 33us; 4us; 33us; 5us; 33us; 6us; 33us; 8us; 33us; 10us; 33us; 12us; 33us; 26us; 33us; 27us; 33us; 28us; 33us; 29us; 33us; 30us; 33us; 31us; 33us; 32us; 33us; 37us; 33us; 38us; 33us; 41us; 33us; 42us; 33us; 44us; 33us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 21us; 41us; 59us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 8us; 1us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 1us; 1us; 2us; 2us; 18us; 2us; 3us; 19us; 1us; 4us; 8us; 4us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 1us; 4us; 8us; 4us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 1us; 4us; 8us; 4us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 1us; 5us; 8us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 8us; 6us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 8us; 6us; 7us; 7us; 8us; 9us; 10us; 11us; 12us; 8us; 6us; 7us; 8us; 8us; 9us; 10us; 11us; 12us; 8us; 6us; 7us; 8us; 9us; 9us; 10us; 11us; 12us; 8us; 6us; 7us; 8us; 9us; 10us; 10us; 11us; 12us; 8us; 6us; 7us; 8us; 9us; 10us; 11us; 11us; 12us; 8us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 12us; 8us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 15us; 8us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 15us; 8us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 16us; 8us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 16us; 8us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 17us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 2us; 15us; 16us; 2us; 15us; 16us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 13us; 15us; 18us; 21us; 23us; 32us; 34us; 43us; 45us; 54us; 56us; 65us; 74us; 83us; 92us; 101us; 110us; 119us; 128us; 137us; 146us; 155us; 164us; 173us; 175us; 177us; 179us; 181us; 183us; 185us; 187us; 189us; 191us; 194us; 197us; 199us; 201us; 203us; 205us; 207us; 209us; 211us; 213us; 215us; 217us; 219us; 221us; |]
let _fsyacc_action_rows = 50
let _fsyacc_actionTableElements = [|7us; 32768us; 1us; 44us; 7us; 12us; 13us; 6us; 15us; 35us; 19us; 49us; 20us; 34us; 21us; 48us; 0us; 49152us; 8us; 32768us; 0us; 3us; 3us; 30us; 4us; 31us; 5us; 32us; 6us; 26us; 7us; 27us; 8us; 28us; 9us; 29us; 0us; 16385us; 5us; 16386us; 1us; 44us; 15us; 35us; 19us; 49us; 20us; 34us; 21us; 48us; 5us; 16387us; 1us; 44us; 15us; 35us; 19us; 49us; 20us; 34us; 21us; 48us; 7us; 32768us; 1us; 44us; 7us; 12us; 13us; 6us; 15us; 35us; 19us; 49us; 20us; 34us; 21us; 48us; 8us; 32768us; 3us; 30us; 4us; 31us; 5us; 32us; 6us; 26us; 7us; 27us; 8us; 28us; 9us; 29us; 17us; 8us; 7us; 32768us; 1us; 44us; 7us; 12us; 13us; 6us; 15us; 35us; 19us; 49us; 20us; 34us; 21us; 48us; 8us; 32768us; 3us; 30us; 4us; 31us; 5us; 32us; 6us; 26us; 7us; 27us; 8us; 28us; 9us; 29us; 10us; 10us; 7us; 32768us; 1us; 44us; 7us; 12us; 13us; 6us; 15us; 35us; 19us; 49us; 20us; 34us; 21us; 48us; 7us; 16388us; 3us; 30us; 4us; 31us; 5us; 32us; 6us; 26us; 7us; 27us; 8us; 28us; 9us; 29us; 7us; 32768us; 1us; 44us; 7us; 12us; 13us; 6us; 15us; 35us; 19us; 49us; 20us; 34us; 21us; 48us; 2us; 16389us; 8us; 28us; 9us; 29us; 2us; 16390us; 8us; 28us; 9us; 29us; 2us; 16391us; 8us; 28us; 9us; 29us; 0us; 16392us; 0us; 16393us; 5us; 16394us; 5us; 32us; 6us; 26us; 7us; 27us; 8us; 28us; 9us; 29us; 5us; 16395us; 5us; 32us; 6us; 26us; 7us; 27us; 8us; 28us; 9us; 29us; 5us; 16396us; 5us; 32us; 6us; 26us; 7us; 27us; 8us; 28us; 9us; 29us; 8us; 32768us; 3us; 30us; 4us; 31us; 5us; 32us; 6us; 26us; 7us; 27us; 8us; 28us; 9us; 29us; 14us; 38us; 8us; 32768us; 3us; 30us; 4us; 31us; 5us; 32us; 6us; 26us; 7us; 27us; 8us; 28us; 9us; 29us; 11us; 39us; 8us; 32768us; 3us; 30us; 4us; 31us; 5us; 32us; 6us; 26us; 7us; 27us; 8us; 28us; 9us; 29us; 14us; 42us; 8us; 32768us; 3us; 30us; 4us; 31us; 5us; 32us; 6us; 26us; 7us; 27us; 8us; 28us; 9us; 29us; 11us; 43us; 8us; 32768us; 2us; 45us; 3us; 30us; 4us; 31us; 5us; 32us; 6us; 26us; 7us; 27us; 8us; 28us; 9us; 29us; 7us; 32768us; 1us; 44us; 7us; 12us; 13us; 6us; 15us; 35us; 19us; 49us; 20us; 34us; 21us; 48us; 7us; 32768us; 1us; 44us; 7us; 12us; 13us; 6us; 15us; 35us; 19us; 49us; 20us; 34us; 21us; 48us; 7us; 32768us; 1us; 44us; 7us; 12us; 13us; 6us; 15us; 35us; 19us; 49us; 20us; 34us; 21us; 48us; 7us; 32768us; 1us; 44us; 7us; 12us; 13us; 6us; 15us; 35us; 19us; 49us; 20us; 34us; 21us; 48us; 7us; 32768us; 1us; 44us; 7us; 12us; 13us; 6us; 15us; 35us; 19us; 49us; 20us; 34us; 21us; 48us; 7us; 32768us; 1us; 44us; 7us; 12us; 13us; 6us; 15us; 35us; 19us; 49us; 20us; 34us; 21us; 48us; 7us; 32768us; 1us; 44us; 7us; 12us; 13us; 6us; 15us; 35us; 19us; 49us; 20us; 34us; 21us; 48us; 0us; 16397us; 0us; 16398us; 1us; 32768us; 20us; 36us; 2us; 32768us; 3us; 37us; 20us; 40us; 7us; 32768us; 1us; 44us; 7us; 12us; 13us; 6us; 15us; 35us; 19us; 49us; 20us; 34us; 21us; 48us; 7us; 32768us; 1us; 44us; 7us; 12us; 13us; 6us; 15us; 35us; 19us; 49us; 20us; 34us; 21us; 48us; 0us; 16399us; 1us; 32768us; 3us; 41us; 7us; 32768us; 1us; 44us; 7us; 12us; 13us; 6us; 15us; 35us; 19us; 49us; 20us; 34us; 21us; 48us; 7us; 32768us; 1us; 44us; 7us; 12us; 13us; 6us; 15us; 35us; 19us; 49us; 20us; 34us; 21us; 48us; 0us; 16400us; 7us; 32768us; 1us; 44us; 7us; 12us; 13us; 6us; 15us; 35us; 19us; 49us; 20us; 34us; 21us; 48us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 0us; 16405us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 8us; 9us; 18us; 19us; 25us; 31us; 39us; 48us; 56us; 65us; 73us; 81us; 89us; 92us; 95us; 98us; 99us; 100us; 106us; 112us; 118us; 127us; 136us; 145us; 154us; 163us; 171us; 179us; 187us; 195us; 203us; 211us; 219us; 220us; 221us; 223us; 226us; 234us; 242us; 243us; 245us; 253us; 261us; 262us; 270us; 271us; 272us; 273us; 274us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 6us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 7us; 8us; 3us; 2us; 2us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16397us; 16398us; 65535us; 65535us; 65535us; 65535us; 16399us; 65535us; 65535us; 65535us; 16400us; 65535us; 16401us; 16402us; 16403us; 16404us; 16405us; |]
let _fsyacc_reductions ()  =    [|
# 223 "FunPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 232 "FunPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "FunPar.fsy"
                                                               _1
                   )
# 35 "FunPar.fsy"
                 : Absyn.expr));
# 243 "FunPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "FunPar.fsy"
                                                               _1
                   )
# 39 "FunPar.fsy"
                 : Absyn.expr));
# 254 "FunPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "FunPar.fsy"
                                                               _1
                   )
# 40 "FunPar.fsy"
                 : Absyn.expr));
# 265 "FunPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "FunPar.fsy"
                                                               If (_2, _4, _6)
                   )
# 41 "FunPar.fsy"
                 : Absyn.expr));
# 278 "FunPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "FunPar.fsy"
                                                               Prim ("-", CstI 0, _2)
                   )
# 42 "FunPar.fsy"
                 : Absyn.expr));
# 289 "FunPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "FunPar.fsy"
                                                               Prim ("+",  _1, _3)
                   )
# 43 "FunPar.fsy"
                 : Absyn.expr));
# 301 "FunPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "FunPar.fsy"
                                                               Prim ("-",  _1, _3)
                   )
# 44 "FunPar.fsy"
                 : Absyn.expr));
# 313 "FunPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "FunPar.fsy"
                                                               Prim ("*",  _1, _3)
                   )
# 45 "FunPar.fsy"
                 : Absyn.expr));
# 325 "FunPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "FunPar.fsy"
                                                               Prim ("/",  _1, _3)
                   )
# 46 "FunPar.fsy"
                 : Absyn.expr));
# 337 "FunPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "FunPar.fsy"
                                                               Prim ("=",  _1, _3)
                   )
# 47 "FunPar.fsy"
                 : Absyn.expr));
# 349 "FunPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "FunPar.fsy"
                                                               Prim ("<>", _1, _3)
                   )
# 48 "FunPar.fsy"
                 : Absyn.expr));
# 361 "FunPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "FunPar.fsy"
                                                               Prim ("<",  _1, _3)
                   )
# 49 "FunPar.fsy"
                 : Absyn.expr));
# 373 "FunPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "FunPar.fsy"
                                                               _1
                   )
# 53 "FunPar.fsy"
                 : Absyn.expr));
# 384 "FunPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "FunPar.fsy"
                                                               Var _1
                   )
# 54 "FunPar.fsy"
                 : Absyn.expr));
# 395 "FunPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "FunPar.fsy"
                                                               Let (_2, _4, _6)
                   )
# 55 "FunPar.fsy"
                 : Absyn.expr));
# 408 "FunPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "FunPar.fsy"
                                                               Letfun (_2, _3, _5, _7)
                   )
# 56 "FunPar.fsy"
                 : Absyn.expr));
# 422 "FunPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "FunPar.fsy"
                                                               _2
                   )
# 57 "FunPar.fsy"
                 : Absyn.expr));
# 433 "FunPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "FunPar.fsy"
                                                               Call (_1, _2)
                   )
# 61 "FunPar.fsy"
                 : Absyn.expr));
# 445 "FunPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "FunPar.fsy"
                                                               Call (_1, _2)
                   )
# 62 "FunPar.fsy"
                 : Absyn.expr));
# 457 "FunPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "FunPar.fsy"
                                                               CstI (_1)
                   )
# 66 "FunPar.fsy"
                 : Absyn.expr));
# 468 "FunPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "FunPar.fsy"
                                                               CstB (_1)
                   )
# 67 "FunPar.fsy"
                 : Absyn.expr));
|]
# 480 "FunPar.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> =
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken;
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) ->
                              match parse_error_rich with
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 25;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
